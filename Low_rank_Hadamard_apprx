function [Utilde] = RLowApprox_Hadamard(A, k, c)
    m = size(A, 1);
    n = size(A, 2);
    
    % S: Random subsampling of identity matrix
    id = eye(n);
    its = randi([1, n], 1, c);
    S = sqrt(n / c) * id(:, its);
    
    % D: random sign vector
    dvec = 2 * binornd(1, 0.5, n, 1) - 1;
    
    % multiplication with random signs
    cmat = fwht(S);
    for i = 1:n
        cmat(i, :) = cmat(i, :) * dvec(i);
    end
    cmat = 1 / sqrt(n) * A * cmat;
    
    % Uc: ONB of column space of C
    [Uc, ~, ~] = svd(cmat);
    
    W = transpose(Uc) * A;
    [Uw, ~, ~] = svds(W, k);
    
    Utilde = Uc * Uw;
    
end


% Parameters for the experiment
m = 1000;
n = 2^13;
k = 5;

% The different values of c
cs = 5:20:800;
% The results are stored here
res = zeros(2, length(cs));

for j = 1:length(cs)
    % Construct A
    M1 = randn(m, m);
    M2 = randn(m, n);
    A = M1 * M2;
    
    % Random algorithm and exact low rank approximation.
    U = RLowApprox_Hadamard(A, k, cs(j));
    [U_, S_, V_] = svds(A, k);
    Ak = U_ * S_ * V_';
    
    res(1, j) = norm(A - Ak, 2) / norm(A, 2);
    res(2, j) = norm(A - U * U' * A, 2) / norm(A, 2);
    disp(j);
end

plot(res');
